;; Copyright Â© 2020 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; PAMELA RL Q-Learning

(ns pamela.tools.q-learning.gym-interface
  "GYM Interface"
  (:require [clojure.string :as string]
            [clojure.repl :refer [pst]]
            [clojure.tools.cli :refer [parse-opts]]
            [clojure.pprint :as pp :refer [pprint]]
            [clojure.tools.logging :as log]
            [environ.core :refer [env]]
            [mbroker.rabbitmq :as mq]
            [langohr.core :as rmq]
            [langohr.exchange :as le]
            [langohr.queue :as lq]
            [langohr.consumers :as lc]
            [langohr.channel :as lch]
            [tpn.fromjson :as fromjson]
            )
  (:gen-class))

;(in-ns 'pamela.tools.q-learning.gym-interface)

(defn actionselector
  [list-of-atoms]
  (deref (first list-of-atoms))) ;+++

(defn reset-state                       ; Invoke the reset +++
  []
  nil)

(defn initialize-simulator
  [gym-world routing channel exchange]
  (mq/publish-object
   {:id "qlearner" :plant-id "gym" :exchange "dmrl" :function-name "make_env" :args [gym-world]}
   routing                              ; routing-key
   channel                              ; channel
   exchange))                           ; exchange

(defn perform                           ; Invoke the action
  [action routing channel exchange]
  (mq/publish-object
   {:id "qlearner" :plant-id "gym" :exchange "dmrl" :function-name "perform-action" :args [action]}
   routing                              ; routing-key
   channel                              ; channel
   exchange))

(defn reset                             ; reset the simulator for the next episode
  [routing channel exchange]
  (mq/publish-object
   {:id "qlearner" :plant-id "gym" :exchange "dmrl" :function-name "reset" :args []}
   routing                              ; routing-key
   channel                              ; channel
   exchange))

(defn render                            ; reset the simulator for the next episode
  [routing channel exchange]
  (mq/publish-object
   {:id "qlearner" :plant-id "gym" :exchange "dmrl" :function-name "render" :args []}
   routing                              ; routing-key
   channel                              ; channel
   exchange))

(defn get-discrete-state                ; Discretize the state +++
  [raw-state]
  nil)

(defn goal-achieved                     ; Open to decide differently
  [state done]
  done)

;;; Fin
